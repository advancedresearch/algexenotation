use algexenotation::*;

fn main() {
    let mut cache: Vec<(u64, u64)> = vec![
    (
        2,
        2,
    ),
    (
        3,
        65537,
    ),
    (
        7,
        550829555713,
    ),
    (
        23,
        687731638273,
    ),
    (
        31,
        721554522113,
    ),
    (
        311,
        723970424833,
    ),
    (
        127,
        723769098257,
    ),
    (
        383,
        724004110337,
    ),
    (
        991,
        724008435713,
    ),
    (
        2039,
        724008468481,
    ),
    (
        3583,
        724008517633,
    ),
    (
        6143,
        724008517889,
    ),
    (
        8191,
        724008550409,
    ),
    (
        73727,
        724008558601,
    ),
    (
        63487,
        724008562721,
    ),
    (
        129023,
        724008562699,
    ),
    (
        131071,
        724008563849,
    ),
    (
        522239,
        724008564113,
    ),
    (
        524287,
        724008564641,
    ),
    (
        1966079,
        724008564457,
    ),
    (
        4128767,
        724008564661,
    ),
    (
        16250879,
        724008563647,
    ),
    (
        14680063,
        724008558587,
    ),
    (
        33546239,
        724008173521,
    ),
    (
        67108351,
        724008173491,
    ),
    (
        201064447,
        724008173437,
    ),
    (
        260046847,
        724008173311,
    ),
    (
        536739839,
        724003979243,
    ),
    (
        1073479679,
        724001882111,
    ),
    (
        5335154687,
        723970424791,
    ),
    (
        2147483647,
        723701989333,
    ),
    (
        8581545983,
        723970424831,
    ),
    (
        16911433727,
        723701989247,
    ),
    (
        32212254719,
        721554505643,
    ),
    (
        51539607551,
        721554505439,
    ),
    (
        206141652991,
        721554505723,
    ),
    (
        266287972351,
        687194766847,
    ),
];

    let mut changes = 0;
    let start: u64 = cache.iter().map(|n| n.1).max().unwrap_or(0);
    for n in start..1_000_000_000_000_u64 {
        if prime_with_miller_rabin(n) {
            changes += 1;
            let bits = n.count_ones() - 1;
            if bits < cache.len() as u32 {
                if cache[bits as usize].0 == 0 {
                    cache[bits as usize].0 = n;
                }
                cache[bits as usize].1 = n
            } else {
                for _ in cache.len() as u32..bits {
                    cache.push((0, 0));
                }
                assert_eq!(bits, cache.len() as u32);
                cache.push((n, n));
            }
            if changes % 1_000_000 == 0 {
                println!("{:#?}", cache);
            }
        }
    }
}
